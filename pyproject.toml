# ============================================================================
# üì¶ BUILD SYSTEM
# ============================================================================
# Uses setuptools with setuptools-scm for automatic versioning from Git tags

[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8", "wheel"]
build-backend = "setuptools.build_meta"

# ============================================================================
# üìã PROJECT METADATA
# ============================================================================

[project]
name = "py-ia-rom-logger"
dynamic = ["version"]
description = "Professional logging library for Python projects with Rich console formatting and structured JSON file output."
readme = "docs/README.md"
requires-python = ">=3.12"
license = { text = "MIT" }
authors = [
  { name = "Yharon Coutinho", email = "coutinho@ia-rom.com" }
]
keywords = [
  "python",
  "logging",
  "rich",
  "json",
  "structured-logging",
  "library"
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
  "rich>=13.0.0",
  "pydantic>=2.0.0",
  "python-json-logger>=3.3.0",
  "tzdata>=2025.2",
]

[project.optional-dependencies]
dev = [
  # Development
  "debugpy>=1.8.0",

  # Testing
  "pytest>=8.0.0",
  "pytest-cov>=4.1.0",
  "pytest-asyncio>=0.23.0",

  # Linting & Formatting (Ruff replaces Black, Flake8, isort, Pylint)
  "ruff>=0.3.0",

  # Type checking
  "mypy>=1.8.0",

  # Task runner
  "poethepoet>=0.25.0",

  # Utilities
  "python-dotenv>=1.0.0",
]

# Project URLs
[project.urls]
Homepage = "https://github.com/Yharon/py-ia-rom-logger"
Repository = "https://github.com/Yharon/py-ia-rom-logger"
Changelog = "https://github.com/Yharon/py-ia-rom-logger/blob/main/CHANGELOG.md"
Documentation = "https://github.com/Yharon/py-ia-rom-logger#readme"

# ============================================================================
# üîß SETUPTOOLS CONFIGURATION
# ============================================================================

[tool.setuptools.packages.find]
where = ["src"]
include = ["py_ia_rom_logger*"]
exclude = [
  "scripts*",
  "tests*",
  "docs*",
]

# ============================================================================
# üìå VERSION MANAGEMENT (setuptools-scm)
# ============================================================================
# Automatically extracts version from Git tags
# Example: tag v1.2.3 ‚Üí version 1.2.3

[tool.setuptools_scm]
version_scheme = "guess-next-dev"  # Auto-increment dev versions
local_scheme = "no-local-version"  # Clean version strings for PyPI

# ============================================================================
# üîç RUFF - Linting & Formatting
# ============================================================================
# Ruff replaces: Black, Flake8, isort, Pylint, pydocstyle, pyupgrade

[tool.ruff]
# Python version target
target-version = "py312"

# Line length (Black-compatible)
line-length = 88

# File/directory exclusions
exclude = [
  ".git",
  ".venv",
  "venv",
  "__pycache__",
  "build",
  "dist",
  "*.egg-info",
  ".pytest_cache",
  ".mypy_cache",
  ".ruff_cache",
]

# Linting rules
[tool.ruff.lint]
# Enable specific rule sets (Ruff uses Flake8 codes)
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # Pyflakes
  "I",   # isort (import sorting)
  "N",   # pep8-naming
  "UP",  # pyupgrade
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
  "RUF", # Ruff-specific rules
]

# Ignore specific rules
ignore = [
  "E501",  # Line too long (handled by formatter)
  "B008",  # Do not perform function call in argument defaults
]

# Allow fix for all enabled rules (when `--fix` is used)
fixable = ["ALL"]
unfixable = []

# Allow unused variables when prefixed with underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Import sorting configuration (isort-compatible)
[tool.ruff.lint.isort]
known-first-party = ["py_ia_rom_logger"]
force-single-line = false
lines-after-imports = 2

# Formatting configuration (Black-compatible)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# ============================================================================
# üß™ PYTEST CONFIGURATION
# ============================================================================

[tool.pytest.ini_options]
# Test discovery patterns
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Command-line options (applied automatically)
addopts = [
  "--verbose",
  "--strict-markers",
  "--strict-config",
  "--cov=py_ia_rom_logger",
  "--cov-report=term-missing:skip-covered",
]

# Markers for test categorization
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]

# Cache directory (respects PYTEST_CACHE_DIR environment variable)
cache_dir = ".pytest_cache"

# ============================================================================
# üìä COVERAGE CONFIGURATION
# ============================================================================

[tool.coverage.run]
source = ["src"]
branch = true
data_file = ".coverage"  # Respects COVERAGE_FILE environment variable
omit = [
  "*/tests/*",
  "*/test_*.py",
  "*/__pycache__/*",
  "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"  # Respects COVERAGE_HTML_DIR environment variable

[tool.coverage.xml]
output = "coverage.xml"  # Respects COVERAGE_XML_FILE environment variable

# ============================================================================
# ü§ñ MYPY - Type Checking
# ============================================================================

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true for strict type checking
ignore_missing_imports = true

# ============================================================================
# ‚ö° POE THE POET - Task Runner
# ============================================================================
# Usage: poe <task_name>

[tool.poe.tasks]
# Development
cli.script = "scripts"

# Linting & Formatting
[tool.poe.tasks.lint]
cmd = "ruff check src tests"

[tool.poe.tasks.format]
cmd = "ruff format src tests"

[tool.poe.tasks.fix]
cmd = "ruff check --fix src tests"

# Testing
[tool.poe.tasks.test]
shell = """
pytest \
  -o cache_dir="${PYTEST_CACHE_DIR:-.pytest_cache}" \
  --cov-report=html:"${COVERAGE_HTML_DIR:-htmlcov}" \
  --cov-report=xml:"${COVERAGE_XML_FILE:-coverage.xml}"
"""

[tool.poe.tasks.test-cov]
shell = """
pytest --cov \
  -o cache_dir="${PYTEST_CACHE_DIR:-.pytest_cache}" \
  --cov-report=html:"${COVERAGE_HTML_DIR:-htmlcov}" \
  --cov-report=xml:"${COVERAGE_XML_FILE:-coverage.xml}"
"""

[tool.poe.tasks.test-fast]
shell = """
pytest -m 'not slow' \
  -o cache_dir="${PYTEST_CACHE_DIR:-.pytest_cache}" \
  --cov-report=html:"${COVERAGE_HTML_DIR:-htmlcov}" \
  --cov-report=xml:"${COVERAGE_XML_FILE:-coverage.xml}"
"""

# Type checking
[tool.poe.tasks.typecheck]
cmd = "mypy src"

# Combined checks (run before commit)
[tool.poe.tasks.check]
sequence = ["lint", "typecheck", "test"]
help = "Run all checks before commit"

# Clean cache (removes symlinked cache directories)
[tool.poe.tasks.clean]
shell = "rm -rf .pytest_cache .mypy_cache .ruff_cache htmlcov .coverage coverage.xml && echo 'Cache cleaned (symlinks removed)'"

